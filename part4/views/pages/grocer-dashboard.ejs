<!DOCTYPE html>
<html lang="he" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>מערכת ניהול מכולת</title>
    <style>
        :root {
            --primary-color: #2e7d32;
            --secondary-color: #f9a825;
            --light-color: #f1f8e9;
            --dark-color: #1b5e20;
            --shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            --error-color: #d32f2f;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23d4e157' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
            min-height: 100vh;
            direction: rtl;
        }

        header {
            background-color: var(--primary-color);
            color: white;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow);
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            display: flex;
            align-items: center;
        }

        .logo-container {
            width: 40px;
            height: 40px;
            background-color: white;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-left: 10px;
        }

        .logo-icon {
            width: 30px;
            height: 30px;
            background-color: var(--secondary-color);
            border-radius: 6px;
            display: flex;
            justify-content: center;
            align-items: center;
            transform: rotate(45deg);
            color: white;
            font-size: 16px;
            font-weight: bold;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-info img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #ddd;
        }

        nav {
            background-color: white;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .nav-list {
            display: flex;
            list-style: none;
        }

        .nav-item {
            padding: 1rem;
            cursor: pointer;
            position: relative;
            color: #555;
            font-weight: 500;
        }

        .nav-item:hover {
            background-color: #f0f0f0;
            color: var(--primary-color);
        }

        .nav-item.active {
            border-bottom: 3px solid var(--primary-color);
            color: var(--primary-color);
            font-weight: 600;
        }

        main {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .card {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            color: var(--dark-color);
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .card-icon {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        .card-content {
            margin-bottom: 1rem;
        }

        .card-value {
            font-size: 2rem;
            font-weight: bold;
            color: var(--dark-color);
        }

        .card-footer {
            display: flex;
            justify-content: space-between;
            color: #666;
            font-size: 0.9rem;
        }

        .btn {
            padding: 0.6rem 1.2rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: var(--dark-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #1a4c19;
            transform: translateY(-2px);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

        .btn-accent {
            background-color: var(--secondary-color);
            color: #333;
        }

        .btn-accent:hover {
            background-color: #f0a000;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background-color: white;
            color: var(--dark-color);
            border: 1px solid var(--dark-color);
        }

        .btn-secondary:hover {
            background-color: #f1f8e9;
        }

        .card-actions {
            display: flex;
            justify-content: flex-start;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .orders-list {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
        }

        .orders-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .orders-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark-color);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 0.8rem;
            text-align: right;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f5f5f5;
            color: var(--dark-color);
            font-weight: 600;
        }

        tr:hover {
            background-color: #f9f9f9;
        }

        .status {
            padding: 0.3rem 0.6rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-pending {
            background-color: #f9a825;
            color: #333;
        }

        .status-approved {
            background-color: #2e7d32;
            color: white;
        }

        .status-delivered {
            background-color: #4caf50;
            color: white;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background-color: white;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            padding: 2rem;
            position: relative;
            box-shadow: var(--shadow);
        }

        .close-btn {
            position: absolute;
            top: 1rem;
            left: 1rem;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark-color);
        }

        input,
        select,
        textarea {
            width: 100%;
            padding: 0.8rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 1rem;
        }

        input:focus,
        select:focus,
        textarea:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(46, 125, 50, 0.2);
            outline: none;
        }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 2rem;
        }

        .supplier-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            padding: 1rem;
            background-color: #f5f5f5;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .supplier-item:hover {
            background-color: #e0e0e0;
            transform: translateY(-2px);
        }

        .supplier-logo {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--primary-color);
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            color: white;
            font-size: 1.2rem;
        }

        .supplier-details {
            flex: 1;
        }

        .supplier-name {
            font-weight: 600;
            margin-bottom: 0.3rem;
            color: #333;
        }

        .supplier-category {
            font-size: 0.9rem;
            color: #666;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: var(--dark-color);
            display: flex;
            align-items: center;
        }

        .section-title i {
            margin-left: 10px;
            color: var(--primary-color);
        }

        .back-link {
            display: inline-flex;
            align-items: center;
            color: var(--primary-color);
            text-decoration: none;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .back-link:hover {
            text-decoration: underline;
        }

        .back-link i {
            margin-left: 5px;
        }

        @media screen and (max-width: 768px) {
            .dashboard {
                grid-template-columns: 1fr;
            }

            .nav-list {
                flex-wrap: wrap;
            }

            th,
            td {
                padding: 0.5rem;
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    <header>
        <div class="logo">
            <div class="logo-container">
                <div class="logo-icon">מ</div>
            </div>
            מכולת הפינה
        </div>
    </header>

    <nav>
        <ul class="nav-list">
            <li class="nav-item active" onclick="showPanel('order-new')">
                <i class="fas fa-shopping-cart"></i> הזמנת סחורה
            </li>
            <li class="nav-item" onclick="showPanel('orders-view')">
                <i class="fas fa-clipboard-list"></i> צפייה בהזמנות
            </li>
        </ul>
    </nav>

    <main>

        <div id="order-new" class="panel">
            <div class="section-title">
                <i class="fas fa-shopping-cart"></i> הזמנת סחורה חדשה
            </div>

            <div class="card" style="margin-bottom: 2rem;">
                <div class="card-header">
                    <div class="card-title">בחר ספק</div>
                </div>
                <div class="card-content">
                    <div class="supplier-list" id="supplier-list">
                        <!-- רשימת הספקים תיטען כאן באמצעות JavaScript -->
                        <div class="loading-spinner">
                            <i class="fas fa-spinner fa-spin"></i> טוען רשימת ספקים...
                        </div>
                    </div>
                </div>
            </div>

            <!-- אזור המוצרים יוצג רק לאחר בחירת ספק -->
            <div id="products-section" style="display: none;">
                <div class="card">
                    <div class="card-header">
                        <div class="card-title">בחר מוצרים מ-<span id="selected-supplier-name"></span></div>
                    </div>
                    <div class="card-content">
                        <div id="products-list">
                            <!-- רשימת המוצרים תיטען כאן באמצעות JavaScript -->
                        </div>

                        <div class="order-summary" id="order-summary" style="display: none; margin-top: 2rem;">
                            <h3>סיכום הזמנה</h3>
                            <div id="selected-products-summary"></div>
                            <div class="total-section">
                                <div class="total-title">סה"כ:</div>
                                <div class="total-value" id="order-total">₪0.00</div>
                            </div>
                            <div class="form-actions" style="margin-top: 1.5rem;">
                                <button class="btn btn-accent" id="submit-order-btn">
                                    <i class="fas fa-paper-plane"></i> שלח הזמנה
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="orders-view" class="panel" style="display: none;">
            <div class="section-title">
                <i class="fas fa-clipboard-list"></i> צפייה בהזמנות
            </div>
            <div class="orders-table-container">
                <table class="orders-table">
                    <thead>
                        <tr>
                            <th>מספר הזמנה</th>
                            <th>שם ספק</th>
                            <th>תאריך</th>
                            <th>סטטוס</th>
                            <th>מספר פריטים</th>
                            <th>סכום כולל</th>
                            <th>מוצרים</th>
                            <th>פעולות</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                        <!-- הזמנות יוטענו כאן דינמית -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <script>
        // כשהדף נטען - מאזין אחד לכל האירועים
        document.addEventListener('DOMContentLoaded', function () {
            // הצגת פאנל הזמנת סחורה כברירת מחדל
            showPanel('order-new');

            // טעינת רשימת הספקים
            loadSuppliers();

            // הוספת event listeners לבחירת מוצרים וכמויות
            document.addEventListener('change', function (event) {
                // כאשר משנים כמות או מסמנים/מסירים סימון ממוצר
                if (event.target.classList.contains('product-checkbox') ||
                    event.target.classList.contains('quantity-input')) {
                    updateOrderSummary();
                }
            });

            // הוספת event listener לכפתור ביצוע ההזמנה
            const submitOrderBtn = document.getElementById('submit-order-btn');
            if (submitOrderBtn) {
                submitOrderBtn.addEventListener('click', submitOrder);
            }
        });

        // פונקציה להצגת פאנל
        function showPanel(panelId) {
            // הסתרת כל הפאנלים
            document.querySelectorAll('.panel').forEach(panel => {
                panel.style.display = 'none';
            });

            // הצגת הפאנל הנבחר
            document.getElementById(panelId).style.display = 'block';

            // שינוי מצב פעיל בניווט
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });

            // הוספת מצב פעיל לפריט הניווט המתאים
            document.querySelector(`.nav-item[onclick="showPanel('${panelId}')"]`).classList.add('active');

            // טעינת הזמנות אם זה פאנל הזמנות
            if (panelId === 'orders-view') {
                loadOrders();
            }
        }

        // פונקציה לטעינת רשימת הספקים
        function loadSuppliers() {
            // הצגת אנימציית טעינה
            const supplierList = document.getElementById('supplier-list');
            supplierList.innerHTML = '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i> טוען רשימת ספקים...</div>';

            // שליחת בקשה לשרת
            fetch('/api/suppliers/names')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(suppliersData => {
                    renderSuppliers(suppliersData);
                })
                .catch(error => {
                    console.error('Error fetching suppliers:', error);
                    supplierList.innerHTML = '<div class="error-message">שגיאה בטעינת רשימת הספקים</div>';
                });
        }

        // פונקציה להצגת רשימת הספקים
        function renderSuppliers(suppliers) {
            const supplierList = document.getElementById('supplier-list');

            if (suppliers.length === 0) {
                supplierList.innerHTML = '<div class="empty-message">לא נמצאו ספקים במערכת</div>';
                return;
            }

            let html = '';

            suppliers.forEach(supplier => {
                const initial = supplier.CompanyName.charAt(0);

                html += `
        <div class="supplier-item" data-id="${supplier.SupplierID}" onclick="selectSupplier(${supplier.SupplierID}, '${supplier.CompanyName}')">
            <div class="supplier-logo">${initial}</div>
            <div class="supplier-details">
                <div class="supplier-name">${supplier.CompanyName}</div>
            </div>
        </div>
        `;
            });

            supplierList.innerHTML = html;
        }

        // פונקציה לבחירת ספק
        function selectSupplier(supplierId, supplierName) {
            // סימון הספק הנבחר
            document.querySelectorAll('.supplier-item').forEach(item => {
                item.classList.remove('selected');
            });

            document.querySelector(`.supplier-item[data-id="${supplierId}"]`).classList.add('selected');

            // הצגת שם הספק באזור המוצרים
            document.getElementById('selected-supplier-name').textContent = supplierName;

            // הצגת אזור המוצרים
            document.getElementById('products-section').style.display = 'block';

            // טעינת מוצרים של הספק
            loadProducts(supplierId);

            // גלילה אל אזור המוצרים
            document.getElementById('products-section').scrollIntoView({ behavior: 'smooth' });
        }

        // פונקציה לטעינת מוצרים
        function loadProducts(supplierId) {
            // הצגת טוען לפני טעינת המוצרים
            const productsList = document.getElementById('products-list');
            productsList.innerHTML = `
        <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin"></i> טוען מוצרים...
        </div>
    `;

            // שליחת בקשה לשרת לקבלת מוצרי הספק
            fetch(`/api/suppliers/${supplierId}/products`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('תקלה בטעינת מוצרים');
                    }
                    return response.json();
                })
                .then(products => {
                    // הצגת המוצרים בטבלה
                    renderProductsTable(products);
                })
                .catch(error => {
                    console.error('שגיאה בטעינת מוצרים:', error);
                    productsList.innerHTML = `
                <div class="error-message">
                    לא ניתן לטעון את המוצרים. אנא נסה שוב.
                </div>
            `;
                });
        }

        // פונקציה להצגת טבלת המוצרים
        function renderProductsTable(products) {
            const productsList = document.getElementById('products-list');

            // אם אין מוצרים
            if (products.length === 0) {
                productsList.innerHTML = '<div class="empty-message">אין מוצרים זמינים לספק זה</div>';
                return;
            }

            // יצירת טבלה עם המוצרים
            let tableHtml = `
        <table class="products-table">
            <thead>
                <tr>
                    <th>שם מוצר</th>
                    <th>מחיר</th>
                    <th>כמות מינימלית</th>
                    <th>כמות להזמנה</th>
                    <th>בחירה</th>
                </tr>
            </thead>
            <tbody>
    `;

            products.forEach(product => {
                tableHtml += `
            <tr>
                <td class="product-name">${product.ProductName}</td>
                <td class="product-price">₪${product.PricePerItem.toFixed(2)}</td>
                <td class="product-min-quantity">${product.MinimumQuantity}</td>
                <td>
                    <input 
                        type="number" 
                        class="quantity-input" 
                        min="${product.MinimumQuantity}" 
                        value="${product.MinimumQuantity}"
                        data-product-id="${product.ProductID}"
                    >
                </td>
                <td>
                    <input 
                        type="checkbox" 
                        class="product-checkbox"
                        data-product-id="${product.ProductID}"
                    >
                </td>
            </tr>
        `;
            });

            tableHtml += `
            </tbody>
        </table>
    `;

            productsList.innerHTML = tableHtml;

            // הוספת מאזינים לשינויים בכמויות ובחירת מוצרים
            document.querySelectorAll('.product-checkbox, .quantity-input').forEach(element => {
                element.addEventListener('change', updateOrderSummary);
            });
        }

        // פונקציה לבדיקת תקינות כמות מוצר
        function validateQuantity(quantityInput, showAlert = false) {
            const quantity = parseInt(quantityInput.value);
            const minQuantity = parseInt(quantityInput.min);

            if (quantity < minQuantity) {
                // עדכון ערך לכמות המינימלית
                quantityInput.value = minQuantity;

                // אם צריך להציג התראה, מציג אותה
                if (showAlert) {
                    const row = quantityInput.closest('tr');
                    const productName = row.querySelector('.product-name').textContent;
                    alert(`עבור המוצר "${productName}" - הכמות המינימלית היא ${minQuantity}. הכמות עודכנה אוטומטית.`);
                }
                return false;
            }
            return true;
        }

        // פונקציית עדכון סיכום הזמנה
        function updateOrderSummary() {
            const orderSummary = document.getElementById('order-summary');
            const selectedProductsSummary = document.getElementById('selected-products-summary');
            const orderTotal = document.getElementById('order-total');

            // איסוף המוצרים הנבחרים
            const selectedProducts = [];
            let totalPrice = 0;

            document.querySelectorAll('.product-checkbox:checked').forEach(checkbox => {
                const row = checkbox.closest('tr');
                const quantityInput = row.querySelector('.quantity-input');

                // בדיקת תקינות כמות ועדכון אם צריך
                validateQuantity(quantityInput);

                const productName = row.querySelector('.product-name').textContent;
                const price = parseFloat(row.querySelector('.product-price').textContent.replace('₪', ''));
                const quantity = parseInt(quantityInput.value);
                const subtotal = price * quantity;

                selectedProducts.push({
                    name: productName,
                    price: price,
                    quantity: quantity,
                    subtotal: subtotal
                });

                totalPrice += subtotal;
            });

            // הצגת סיכום המוצרים
            if (selectedProducts.length > 0) {
                let summaryHtml = '<ul>';
                selectedProducts.forEach(product => {
                    summaryHtml += `
                <li>
                    ${product.name} - 
                    כמות: ${product.quantity} - 
                    מחיר: ₪${product.subtotal.toFixed(2)}
                </li>
            `;
                });
                summaryHtml += '</ul>';

                selectedProductsSummary.innerHTML = summaryHtml;
                orderTotal.textContent = `₪${totalPrice.toFixed(2)}`;
                orderSummary.style.display = 'block';
            } else {
                orderSummary.style.display = 'none';
            }
        }

        // פונקציית ביצוע הזמנה
        function submitOrder() {
            // איסוף נתוני המוצרים הנבחרים
            const selectedProducts = [];
            const checkboxes = document.querySelectorAll('.product-checkbox:checked');

            if (checkboxes.length === 0) {
                alert('אנא בחר מוצרים להזמנה');
                return;
            }

            // בדיקת תקינות כמויות
            let isValid = true;
            checkboxes.forEach(checkbox => {
                const row = checkbox.closest('tr');
                const quantityInput = row.querySelector('.quantity-input');

                // שימוש בפונקציית הבדיקה עם הצגת התראה
                if (!validateQuantity(quantityInput, true)) {
                    isValid = false;
                    return;
                }

                selectedProducts.push({
                    productId: checkbox.dataset.productId,
                    quantity: parseInt(quantityInput.value)
                });
            });

            if (!isValid) return;

            // קבלת מזהה הספק הנבחר
            const selectedSupplier = document.querySelector('.supplier-item.selected');
            if (!selectedSupplier) {
                alert('אנא בחר ספק');
                return;
            }
            const supplierId = selectedSupplier.dataset.id;

            // הכנת נתוני ההזמנה
            const orderData = {
                supplierId: parseInt(supplierId),
                items: selectedProducts
            };

            // שליחת ההזמנה לשרת
            fetch('/order/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw err; });
                    }
                    return response.json();
                })
                .then(result => {
                    // הודעת הצלחה
                    alert(`ההזמנה נוצרה בהצלחה. מספר הזמנה: ${result.orderId}`);

                    // איפוס הטופס
                    resetOrderForm();
                })
                .catch(error => {
                    console.error('שגיאה:', error);
                    alert(`שגיאה ביצירת הזמנה: ${error.message || 'אירעה שגיאה'}`);
                });
        }

        // פונקציה לאיפוס טופס ההזמנה
        function resetOrderForm() {
            // נקה את הטבלה
            document.getElementById('products-list').innerHTML = '';
            // הסתר את סעיף המוצרים
            document.getElementById('products-section').style.display = 'none';
            // הסר סימון מהספק
            document.querySelectorAll('.supplier-item').forEach(item => {
                item.classList.remove('selected');
            });
            // הסתר סיכום הזמנה
            document.getElementById('order-summary').style.display = 'none';
        }

        // פונקציה לטעינת כל ההזמנות
        function loadOrders() {
            const tableBody = document.getElementById('ordersTableBody');
            tableBody.innerHTML = '<tr><td colspan="8"><div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i> טוען הזמנות...</div></td></tr>';

            fetch('/order/all-orders')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('תקלה בטעינת הזמנות');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        renderOrders(data.orders);
                    } else {
                        showOrdersError(data.message || 'שגיאה בטעינת הזמנות');
                    }
                })
                .catch(error => {
                    console.error('שגיאה בטעינת הזמנות:', error);
                    showOrdersError('אירעה שגיאה בטעינת ההזמנות');
                });
        }

        // פונקציה להצגת שגיאת טעינת הזמנות
        function showOrdersError(message) {
            const tableBody = document.getElementById('ordersTableBody');
            tableBody.innerHTML = `<tr><td colspan="8" class="error-message">${message}</td></tr>`;
        }

        // הצגת הזמנות בטבלה
        function renderOrders(orders) {
            const tableBody = document.getElementById('ordersTableBody');

            if (!orders || orders.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="8" class="empty-message">לא נמצאו הזמנות</td></tr>';
                return;
            }

            tableBody.innerHTML = '';

            orders.forEach(order => {
                const row = document.createElement('tr');

                // פענוח מחרוזת ה-JSON לתוך מערך אובייקטים
                const itemsArray = JSON.parse(order.Items);

                // מוצרים יוצגו כטקסט מפורט
                const productsDetails = itemsArray.map(item =>
                    `${item.ProductName} (${item.Quantity} יח׳) - ₪${(item.Quantity * item.PricePerItem).toFixed(2)}`
                ).join('<br>');

                row.innerHTML = `
            <td>${order.OrderID}</td>
            <td>${order.SupplierName}</td>
            <td>${formatDate(order.OrderDate)}</td>
            <td>${order.Status}</td>
            <td>${order.ItemCount}</td>
            <td>₪${order.TotalAmount.toFixed(2)}</td>
            <td>${productsDetails}</td>
            <td>
                ${order.Status === 'בתהליך' ?
                        `<button class="btn btn-primary complete-order" 
                    data-order-id="${order.OrderID}" 
                    data-supplier-id="${order.SupplierID}">
                    <i class="fas fa-check"></i> אשר הזמנה
                </button>` : ''}
            </td>
        `;

                tableBody.appendChild(row);
            });

            // הוספת מאזין לכפתורי אישור הזמנה
            document.querySelectorAll('.complete-order').forEach(button => {
                button.addEventListener('click', (e) => {
                    const orderId = e.currentTarget.dataset.orderId;
                    const supplierId = e.currentTarget.dataset.supplierId;
                    completeOrder(orderId, supplierId);
                });
            });
        }

        // פונקציה לאישור הזמנה
        function completeOrder(orderId, supplierId) {
            fetch('/order/complete', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId: orderId,
                    supplierId: supplierId
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('תקלה באישור הזמנה');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // רענון ההזמנות
                        loadOrders();
                    } else {
                        alert(data.message || 'אירעה שגיאה באישור ההזמנה');
                    }
                })
                .catch(error => {
                    console.error('שגיאה באישור הזמנה:', error);
                    alert('אירעה שגיאה באישור ההזמנה');
                });
        }

        // פונקציה לפורמט תאריך
        function formatDate(dateString) {
            const options = { year: 'numeric', month: 'short', day: 'numeric' };
            return new Date(dateString).toLocaleDateString('he-IL', options);
        }
    </script>
</body>

</html>